QuickStart Cookbook Instructions for CTS 6 bundle for webservices

=============================================================================================================
CTS Instructions to get, configure and run CTS 6 technology bundle for webservices technologies for Java EE 6
=============================================================================================================

(1) Grab the Java EE 6 profile for GlassFish V3 zip bundle you wish to test.
    We usually grab (latest-glassfish.zip) from nightly location below:

    Java EE 6 RI Nightly Bundle Location
    ------------------------------------
    http://download.java.net/glassfish/v3/nightly

    unzip bundle to your glassfish location

    Example)
    --------
    mkdir /files/jakartaee
    cd /files/jakartaee
    unzip bundle

    This will create a glassfish bundle installation under /files/jakartaee/glassfishv3 

(2) Grab the jakartaee technology bundle of interest for CTS 6 builds which are built
    using nightly Java EE 6 RI builds from here:

    CTS Bundle location
    -------------------
    http://invalid.domain.com/JWSCQE/links/builds/tcks/jakartaee_cts/6/patch-nightly

    Example) To run just webservices related technologies you can grab the following:

    o jakartaee-webservices-6.0_<DateTimeStamp>.zip

       or the full cts bundle

    o jakartaeetck-6.0_<DateTimeStamp>.zip

(3) Create a directory to hold the cts webservices bundle

    mkdir /files/cts
    cd /files/cts
    unzip the bundle into this directory

    This will create a test bundle under /files/cts/jakartaee-webservices 

     or for the full CTS bundle

    This will create a test bundle under /files/cts/jakartaeetck 

(4) Edit your ts.jte file under /files/cts/jakartaee-webservices/bin/ts.jte or
    /files/cts/jakartaeetck/bin/ts.jte

    set jakartaee.home     set to directory where your GlassFish v3 appserver is installed
                        (from above this would be set to /files/jakartaee/glassfishv3/glassfish
                         NOTE: subdir glassfish after glassfishv3)
        jakartaee.home.ri  (same as jakartaee.home)
        orb.host 	set to host where GlassFish appserver is running (I use localhost)
        orb.port 	set to port where GlassFish appserver is running (usually 3699)
        orb.host.ri     for most cases, this is same as orb.host
        orb.port.ri 	set to port where GlassFish ri appserver is running (usually 3700)

(5) Set the following environment variables and configure your appserver for CTS

    setenv TS_HOME /files/cts/jakartaee-webservices		# Set to top level unzipped bundle dir

	  or if full CTS bundle

    setenv TS_HOME /files/cts/jakartaeetck				# Set to top level unzipped bundle dir

    setenv ANT_HOME $TS_HOME/tools/ant				# Need to point to ant within CTS (uses special ant libs within CTS)
								# Set ANT_OPTS to pickup new endorsed API's (jaxws2.2/jaxb2.2 etc ...)
								# and for GlassFish V3 use full absolute path to endorsed dir.

    setenv ANT_OPTS -Djava.endorsed.dirs=/files/jakartaee/glassfishv3/glassfish/modules/endorsed

								# ANT_OPTS setting is needed when using ant to
								# build the tests so it picks up the right API's
								# if using SE6 which has a version of jaxws/jaxb
								# within SE6.

    set path = ( $TS_HOME/bin $ANT_HOME/bin $path )		# For convenience add TS_HOME/bin and ANT_HOME bin to path)
    cd $TS_HOME/bin						# Change to TS_HOME/bin to configure for CTS

    ant config.vi 						# Full CTS configuration of appserver

	or

    ant config.vi -Denable.jms=false \ 				# Partial CTS configuration of appserver for webservices.
		  -Dskip.config.connector=true			# Since webservices bundle tests do not use jms, jdbc or connectors
		  -Dcreate.jdbc.pools=false			# this saves config setup steps not needed.

    ant build.special.webservices.clients			# For building the special webservices clients under the tree
								# webservices12/specialcases. Run this ant target after the 
								# config.vi and target above.


(6) We can run tests now. Goto a webservices test directory and type ant runclient to
    run a test. The 6 webservices cts directories are:

	(jaxrpc, webservices, jaxws, jws, webservices12, webservices13)

    cd $TS_HOME/src/com/sun/ts/tests (jaxrpc, webservices, jaxws, jws, webservices12)


    For jaxws and jws webservices tests since they are a rebuildable technology there is
    the concept of forward and reverse tests. For the standard default case always run
    forward tests.  The reverse tests are run when the test suite is rebuilt using vendors
    tools and run against the Sun RI in reverse mode.

    Example 1)
    Run just the following webservices12 test case in all vehicle clients
    ---------------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/webservices12/ejb/annotations/WSEjbWebServiceRefTest1
    ant -Dkeywords=forward runclient

    Example 2)
    Run the ee/w2j/document/literal subtree of tests withing jaxws in all vehicle clients
    -------------------------------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jaxws/ee/w2j/document/literal
    ant -Dkeywords=forward runclient

    Example 3)
    Run the entire tree of tests withing jaxws in all vehicles clients
    ------------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jaxws
    ant -Dkeywords=forward runclient


(7) How do I run tests in specific vehicles. Right now most of the tests are built for
    several client vehicles determined by the $TS_HOME/src/vehicle.properties file which
    lists the vehicles built for individual tests or test directories. To see the vehicles
    built within your CTS bundle for a given test just change to that test directory and
    type 'ant ld'.

    Example)
    --------
    cd $TS_HOME/src/com/sun/ts/tests/jaxws/ee/j2w/document/literal/marshalltest
    ant ld
Buildfile: build.xml
     [echo] ts.home = /files/cts/jakartaee-webservices/bin/xml/../..
     [echo] The deliverable currently in use is /files/cts/jakartaee-webservices/bin/xml/../../bin.
Trying to override old definition of datatype string

ld:
     [echo] Files under
     [echo] /files/cts/jakartaee-webservices/bin/xml/../../dist/com/sun/ts/tests/jaxws/ee/w2j/document/literal/marshalltest
     [echo] --------------------------------------------------
     [echo] WSW2JDLMarshallTest.ear
     [echo] WSW2JDLMarshallTest_web.war
     [echo] WSW2JDLMarshallTest_web.war.sun-web.xml
     [echo] WSW2JDLMarshallTest_wsappclient_vehicle.ear
     [echo] WSW2JDLMarshallTest_wsappclient_vehicle_client.jar
     [echo] WSW2JDLMarshallTest_wsappclient_vehicle_client.jar.sun-application-client.xml
     [echo] WSW2JDLMarshallTest_wsejb_vehicle.ear
     [echo] WSW2JDLMarshallTest_wsejb_vehicle_client.jar
     [echo] WSW2JDLMarshallTest_wsejb_vehicle_client.jar.sun-application-client.xml
     [echo] WSW2JDLMarshallTest_wsejb_vehicle_ejb.jar
     [echo] WSW2JDLMarshallTest_wsejb_vehicle_ejb.jar.sun-ejb-jar.xml
     [echo] WSW2JDLMarshallTest_wsservlet_vehicle.ear
     [echo] WSW2JDLMarshallTest_wsservlet_vehicle_web.war
     [echo] WSW2JDLMarshallTest_wsservlet_vehicle_web.war.sun-web.xml

BUILD SUCCESSFUL
Total time: 3 seconds

    The above listing shows the EAR archives built for this test. The client vehicles listed
    above show wsappclient_vehicle, wsejb_vehicle and wsservlet_vehicle are built.

    Example 1)
    To run this test in all vehicles just type:

    cd $TS_HOME/src/com/sun/ts/tests/jaxws/ee/j2w/document/literal/marshalltest
    ant -Dkeywords=forward runclient

    To run specific vehicle clients you need to specify them using javatest keywords.

    Example 2)
    To run this test client in just wsappclient vehicle:

    cd $TS_HOME/src/com/sun/ts/tests/jaxws/ee/j2w/document/literal/marshalltest
    ant -Dkeywords="forward & wsappclient_vehicle" runclient

    Example 3)
    To run this test client in wsappclient,wsservlet vehicles:

    cd $TS_HOME/src/com/sun/ts/tests/jaxws/ee/j2w/document/literal/marshalltest
    ant -Dkeywords="forward & (wsappclient_vehicle | wsservlet_vehicle)" runclient

(8) How do I run a specific test within a testcase.

    cd $TS_HOME/src/com/sun/ts/tests/jaxws/ee/w2j/document/literal/httptest

    Get a list of tests within test case as follows

    grep @testName Client.java
     *   @testName:  TestGoodSoapMessage
     *   @testName:  TestGoodSoapMessageNoXMLDeclaration
     *   @testName:  TestGoodOneWaySoapMessage
     *   @testName:  TestGoodOneWaySoapMessageNoXMLDeclaration
     *   @testName:  TestSoapMessageUsingUTF16Encoding

     To run the following test (TestGoodOneWaySoapMessageNoXMLDeclaration) in all vehicles type:

     ant -Dkeywords=forward -Dtest.client=Client.java -Dtest=TestGoodOneWaySoapMessageNoXMLDeclaration runclient

     To run the following test (TestGoodOneWaySoapMessageNoXMLDeclaration) in wsappclient,wsservlet vehicles type:

     ant -Dkeywords="forward & (wsappclient_vehicle | wsservlet_vehicle)" -Dtest.client=Client.java \
	-Dtest=TestGoodOneWaySoapMessageNoXMLDeclaration runclient


(9) Controlling CTS javatest harness execution modes

    By default when executing ant runclient on a CTS test the javatest harness
    does a (deploy, run, undeploy) of test archives as specified by the following
    property with TS_HOME/bin/ts.jte file:

# @harness.executeMode  used to run the harness in the following modes
#                       of execution:
#    0 - default (deploy, run, undeploy)
#    1 - deploy only
#    2 - run only
#    3 - undeploy only
#    4 - deploy and run only

    If you want to control the deployment/running/undeployment of CTS test execution
    differently than the default value of 0 you can tweek this parameter value as
    specified above.


(10) Turn on additional test debugging/tracing option

    The following property is used to control this as specified in TS_HOME/bin/ts.jte:

# @harness.log.traceflag  used to turn on/off verbose debugging output
#                         for the tests.

    Set this to true for any additional verbose test output that the test may print out
    via TestUtil.logTrace calls. The default setting is false.


(11) Java EE 6 now has the concept of profiles. By default CTS 6 runs the jakartaee profile.
    Various profile data is specified in:

    o TS_HOME/src/com/sun/ts/lib/harness/keyword.properties

    Examples of using keywords property to specify profiles are as follows

    To run the full jakartaee profile of tests
    ---------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests
    ant runclient
      or
    ant -Dkeywords=jakartaee runclient	# This is the same as above since jakartaee is the default profile run

    To run the jakartaee web profile of tests
    --------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests
    ant -Dkeywords=jakartaee_web_profile runclient

    To run the jsr109 profile in both (web and ejb) profile support
    ---------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests
    ant -Dkeywords=ws_webejb runclient

    To run the jsr109 profile in just web container profile support
    ---------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests
    ant -Dkeywords=ws_web runclient

    To run the jsr109 profile in just ejb container profile support
    ---------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests
    ant -Dkeywords=ws_ejb runclient

(12) Attaching debugger to CTS test clients

     Add the following options to command.textExecute or command.testExecuteAppClient in the ts.jte file
     right after the invocation of java.

     For CTS debugging use these options to java command line invocation (NEW WAY for releases SE5 and up):

     -agentlib:jdwp=transport=dt_socket,address=5555,server=y,suspend=y

     For example here is a sample for these props in ts.jte (extraneous lines removed):

command.testExecute=com.sun.ts.lib.harness.ExecTSTestCmd \
	.
	.
        ${JAVA_HOME}/bin/java \
	-agentlib:jdwp=transport=dt_socket,address=5555,server=y,suspend=y \
	.
	.
        -Ddeliverable.class=${deliverable.class} $testExecuteClass $testExecuteArgs

command.testExecuteAppClient= \
        com.sun.ts.lib.harness.ExecTSTestCmd DISPLAY=${ts.display} HOME="${user.home}" \
	.
	.
        ${JAVA_HOME}/bin/java \
	-agentlib:jdwp=transport=dt_socket,address=5556,server=y,suspend=y \
	.
	.
        -Ddeliverable.class=${deliverable.class} -javaagent:${jakartaee.home}/modules/gf-client.jar=arg=-configxml,arg=${ts.home}/tmp/appclient/s1as.sun-acc.xml,client=jar=$testExecuteArgs

QuickStart Cookbook Instructions for CTS 6 bundle for jms

======================================================================================================
CTS Instructions to get, configure and run CTS 6 technology bundle for jms technologies for Java EE 6
======================================================================================================

(1) Grab the Java EE 6 profile for GlassFish V3 or V3.1 zip bundle you wish to test.
    We usually grab (latest-glassfish.zip) from nightly location below:

    Java EE 6 RI Nightly Bundle Location
    ------------------------------------
    http://download.java.net/glassfish/v3/nightly
    http://download.java.net/glassfish/v3.1/nightly

    unzip bundle to your glassfish location

    Example)
    --------
    mkdir /files/jakartaee
    cd /files/jakartaee
    unzip bundle

    This will create a glassfish bundle installation under /files/jakartaee/glassfishv3 or
    /files/jakartaee/glassfish3

(2) Grab the jakartaee technology bundle of interest for CTS 7 builds which are built
    using nightly Java EE 6 RI builds from here:

    CTS Bundle location
    -------------------
    http://invalid.domain.com/JWSCQE/links/builds/tcks/jakartaee_cts/6/nightly

    Example) To run just jms related technologies you can grab the following:

    o jakartaee-jms-7.0_<DateTimeStamp>.zip

       or the full cts bundle

    o jakartaeetck-7.0_<DateTimeStamp>.zip

(3) Create a directory to hold the cts or jms subset bundle

    mkdir /files/cts
    cd /files/cts
    unzip the bundle into this directory

    This will create a test bundle under /files/cts/jakartaee-jms

     or for the full CTS bundle

    This will create a test bundle under /files/cts/jakartaeetck 

(4) Edit your ts.jte file under /files/cts/jakartaeetck/bin/ts.jte 

    set jakartaee.home     set to directory where your GlassFish v3 appserver is installed
                        (from above this would be set to /files/jakartaee/glassfishv3/glassfish
                         NOTE: subdir glassfish after glassfishv3)
        jakartaee.home.ri  (same as jakartaee.home)
        orb.host 	set to host where GlassFish appserver is running (Leave as default)
        orb.port 	set to port where GlassFish appserver is running (Leave as default)
        webServerHost   web server host (Leave as default)
        webServerPort   web server port (Leave as default)

	Examples

	jakartaee.home=/files/jakartaee/glassfishv3/glassfish or /files/jakartaee/glassfish3/glassfish

(5) Set the following environment variables and configure your appserver for CTS

    setenv TS_HOME /files/cts/jakartaee-jms		# Set to top level unzipped bundle dir

	  or if full CTS bundle

    setenv TS_HOME /files/cts/jakartaeetck			# Set to top level unzipped bundle dir

    setenv ANT_HOME $TS_HOME/tools/ant			# Need to point to ant within CTS (uses special ant libs within CTS)
							# Set ANT_OPTS to pickup new endorsed API's and for
							# GlassFish V3 use full absolute path to endorsed dir.

    setenv ANT_OPTS -Djava.endorsed.dirs=/files/jakartaee/glassfishv3/glassfish/modules/endorsed

							# ANT_OPTS setting is needed when using ant to
							# build the tests so it picks up the right API's

    set path = ( $TS_HOME/bin $ANT_HOME/bin $path )	# For convenience add TS_HOME/bin and ANT_HOME bin to path)
    cd $TS_HOME/bin					# Change to TS_HOME/bin to configure for CTS

    ant config.vi 					# Full CTS configuration of glassfish appserver

(6) We can run tests now. Goto a jms test directory and type ant runclient to
    run a test. All the jms tests are under the jms subtree.

    cd $TS_HOME/src/com/sun/ts/tests/jms

    Examples of running jms tests

    Example 1)
    Run a single jms test directory in all vehicle clients
    ------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jms/ee/all/bytesMsgQueue
    ant runclient

    Example 2)
    Run a subtree of jms test directories in all vehicle clients
    -------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jms/ee/all
    ant runclient

    Example 3)
    Run the entire tree of jms tests in all vehicles clients
    --------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jms
    ant runclient

    Example 4)
    Run a single test within a jms test directory in all vehicle clients
    --------------------------------------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests/jms/ee/all/bytesMsgQueue
    ant -Dtest.client=BytesMsgQueueTests.java -Dtest=bytesMsgNullStreamQTest runclient


(7) How do I run tests in specific vehicles. Right now most of the tests are built for
    several client vehicles determined by the $TS_HOME/src/vehicle.properties file which
    lists the vehicles built for individual tests or test directories. To see the vehicles
    built within your CTS bundle for a given test just change to that test directory and
    type 'ant ld'.

    Example)
    --------
    cd $TS_HOME/src/com/sun/ts/tests/jms/ee/all/bytesMsgQueue
    ant ld

Buildfile: build.xml
     [echo] ts.home = /export/home/mrbean/files/svn-spider/bin/xml/../..
     [echo] The deliverable currently in use is /export/home/mrbean/files/svn-spider/bin/xml/../../install/j2ee.
     [copy] Copying 1 file to /export/home/mrbean/files/svn-spider/src
     [copy] Copying 1 file to /export/home/mrbean/files/svn-spider/src
Trying to override old definition of datatype string

ld:
     [echo] Files under
     [echo] /export/home/mrbean/files/svn-spider/bin/xml/../../dist/com/sun/ts/tests/jms/ee/all/bytesMsgQueue
     [echo] --------------------------------------------------
     [echo] bytesMsgQueue_appclient_vehicle.ear
     [echo] bytesMsgQueue_appclient_vehicle_client.jar
     [echo] bytesMsgQueue_appclient_vehicle_client.jar.sun-application-client.xml
     [echo] bytesMsgQueue_ejb_vehicle.ear
     [echo] bytesMsgQueue_ejb_vehicle_client.jar
     [echo] bytesMsgQueue_ejb_vehicle_client.jar.sun-application-client.xml
     [echo] bytesMsgQueue_ejb_vehicle_ejb.jar
     [echo] bytesMsgQueue_ejb_vehicle_ejb.jar.sun-ejb-jar.xml
     [echo] bytesMsgQueue_jsp_vehicle.ear
     [echo] bytesMsgQueue_jsp_vehicle_web.war
     [echo] bytesMsgQueue_jsp_vehicle_web.war.sun-web.xml
     [echo] bytesMsgQueue_servlet_vehicle.ear
     [echo] bytesMsgQueue_servlet_vehicle_web.war
     [echo] bytesMsgQueue_servlet_vehicle_web.war.sun-web.xml

BUILD SUCCESSFUL
Total time: 2 seconds

    The above listing shows the EAR archives built for this test. The client vehicles listed
    above show appclient_vehicle, ejb_vehicle, jsp_vehicle and servlet_vehicle are built.

    Example 1)
    To run this test in all vehicles just type:

    cd $TS_HOME/src/com/sun/ts/tests/jms/ee/all/bytesMsgQueue
    ant runclient

    To run specific vehicle clients you need to specify them using javatest keywords.

    Example 2)
    To run this test client in just appclient vehicle:

    cd $TS_HOME/src/com/sun/ts/tests/jms/ee/all/bytesMsgQueue
    ant  -Dkeywords="appclient_vehicle" runclient

    Example 3)
    To run this test client in appclient,servlet vehicles:

    cd $TS_HOME/src/com/sun/ts/tests/jms/ee/all/bytesMsgQueue
    ant  -Dkeywords="(appclient_vehicle | servlet_vehicle)" runclient

(8) How do I run a specific test within a testcase.

    cd $TS_HOME/src/com/sun/ts/tests/jms/ee/all/bytesMsgQueue

    Get a list of tests within test case as follows

    grep @testName BytesMsgQueueTests.java
BytesMsgQueueTests.java:     * @testName:   bytesMsgNullStreamQTest
BytesMsgQueueTests.java:     * @testName:         bytesMessageQTestsFullMsg
BytesMsgQueueTests.java:     * @testName:         bytesMessageQNotWriteable

     To run the following test (bytesMsgNullStreamQTest) in all vehicles type:

     ant -Dtest.client=BytesMsgQueueTests.java -Dtest=bytesMsgNullStreamQTest runclient

     To run the following test (bytesMsgNullStreamQTest) in appclient,servlet vehicles type:

     ant -Dkeywords="(appclient_vehicle | servlet_vehicle)" -Dtest.client=BytesMsgQueueTests.java \
	-Dtest=bytesMsgNullStreamQTest runclient


(9) Controlling CTS javatest harness execution modes

    By default when executing ant runclient on a CTS test the javatest harness
    does a (deploy, run, undeploy) of test archives as specified by the following
    property with TS_HOME/bin/ts.jte file:

# @harness.executeMode  used to run the harness in the following modes
#                       of execution:
#    0 - default (deploy, run, undeploy)
#    1 - deploy only
#    2 - run only
#    3 - undeploy only
#    4 - deploy and run only

    If you want to control the deployment/running/undeployment of CTS test execution
    differently than the default value of 0 you can tweek this parameter value as
    specified above.


(10) Turn on additional test debugging/tracing option

    The following property is used to control this as specified in TS_HOME/bin/ts.jte:

# @harness.log.traceflag  used to turn on/off verbose debugging output
#                         for the tests.

    Set this to true for any additional verbose test output that the test may print out
    via TestUtil.logTrace calls. The default setting is false.


(11) Java EE 6 now has the concept of profiles. By default CTS 6 runs the jakartaee profile.
     Various profile data is specified in:

    o TS_HOME/src/com/sun/ts/lib/harness/keyword.properties

    Examples of using keywords property to specify profiles are as follows

    To run the full jakartaee profile of tests
    ---------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests
    ant runclient
      or
    ant -Dkeywords=jakartaee runclient	# This is the same as above since jakartaee is the default profile run

    To run the jakartaee web profile of tests
    --------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests
    ant -Dkeywords=jakartaee_web_profile runclient

    To run the just jms profile in jakartaee
    -------------------------------------
    cd $TS_HOME/src/com/sun/ts/tests
    ant -Dkeywords=jms runclient

(12) Attaching debugger to CTS test clients

     Add the following options to command.textExecute or command.testExecuteAppClient in the ts.jte file
     right after the invocation of java.

     For CTS debugging use these options to java command line invocation (NEW WAY for releases SE5 and up):

     -agentlib:jdwp=transport=dt_socket,address=5555,server=y,suspend=y

     For example here is a sample for these props in ts.jte (extraneous lines removed):

command.testExecute=com.sun.ts.lib.harness.ExecTSTestCmd \
	.
	.
        ${JAVA_HOME}/bin/java \
	-agentlib:jdwp=transport=dt_socket,address=5555,server=y,suspend=y \
	.
	.
        -Ddeliverable.class=${deliverable.class} $testExecuteClass $testExecuteArgs

command.testExecuteAppClient= \
        com.sun.ts.lib.harness.ExecTSTestCmd DISPLAY=${ts.display} HOME="${user.home}" \
	.
	.
        ${JAVA_HOME}/bin/java \
	-agentlib:jdwp=transport=dt_socket,address=5556,server=y,suspend=y \
	.
	.
        -Ddeliverable.class=${deliverable.class} -javaagent:${jakartaee.home}/modules/gf-client.jar=arg=-configxml,arg=${ts.home}/tmp/appclient/s1as.sun-acc.xml,client=jar=$testExecuteArgs
